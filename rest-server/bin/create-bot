#!/usr/bin/env node
'use strict';

// Setup the database
require('../config/db').setup();
const roles = require('../config/access/roles');
const validate = require('../lib/validate');
const models = require('../models');
const Account = models.Account;

const HELP_ARGS = ['-h', '-H', '-?', '/h', '/H', '/?'];

var errors = [];
var argv = process.argv;
var reqUser = {};

if (argv.length <= 2) {
  console.log(`Usage: ${argv[1]} -u (username) -e (email) -p (password)`);
  process.exit(0);
}

// TODO allow for reading JSON from stdin.
for (let i = 2; i < argv.length; i += 2) {
  if (HELP_ARGS.includes(argv[i])) {
    console.log(`Usage: ${argv[1]} -u (username) -e (email) -p (password)`);
    process.exit(0);
  }
  if (i + 1 >= argv.length || argv[i].length != 2 || argv[i][0] != '-') {
    errors.push(`Invalid argument '${argv[i]}'`);
    continue;
  }
  if (HELP_ARGS.includes(argv[i + 1])) {
    console.log(`Usage: ${argv[1]} -u (username) -e (email) -p (password)`);
    process.exit(0);
  }
  let v = argv[i + 1].trim();
  switch (argv[i][1]) {
    case 'u':
      reqUser.username = v;
      break;
    case 'e':
      reqUser.email = v;
      break;
    case 'p':
      // TODO password should never be sent in the command-line because
      // other users on the computer could see this.
      reqUser.password = v;
      break;
    default:
      errors.push(`Invalid argument ${argv[i]}`);
  }
}

if (!validate.isAlphanumericName(reqUser.username)
    || reqUser.username.length < 3
    || reqUser.username.length > 100) {
  errors.push(
    'Username must be a string of no less than 3 characters, no more than 100 characters, and contain only numbers and lowercase letters');
}

if (!validate.isEmailAddress(reqUser.email) || reqUser.email.length > 120) {
  errors.push(
    'Email must be a valid email address no longer than 120 characters');
}

if (!validate.isString(reqUser.password, 6, 100)) {
  errors.push(
    'Password must be a string with length between 6 and 100 characters');
}

if (errors.length > 0) {
  console.log('Problems found during processing:\n    ' +
    errors.join('\n    '));
  process.exit(1);
}

Account
  .find({
    $or: [ { id: reqUser.username }, { accountEmail: reqUser.email }]
  })
  .lean()
  .exec()
  .then((matchingAccounts) => {
    if (matchingAccounts.length > 0) {
      let names = ([reqUser.username, reqUser.email]).concat(reqUser.names);
      throw validate.error(names,
        'username, email, or names',
        'One of these values is already in use'
      );
    }

    // Create the account.  This might fail due to a duplicate
    // username, which is fine.
    return new Account({
        id: reqUser.username,
        authentications: [
          {
            source: 'local',
            id: reqUser.email,
            userInfo: [reqUser.password],
            browser: [],
          }
        ],
        role: roles.BOT.name,
        accountEmail: reqUser.email,
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,

        // cannot act as a user, meaning no one
        // can assign it stuff or send it stuff,
        // so it has no user.
        userRef: null
      })
      .save();
  })
  .then((account) => {
    console.log(`Created bot with username ${account.id}.`);

    // Make sure we quit, by closing off our connections.
    require('mongoose').disconnect();

    // This should exit normally, but it just hangs.  Apparently,
    // there's some open socket somewhere.
    process.exit(0);
  })
  .catch((err) => {
    console.error(err.message);
    if (err.details) {
      for (let i = 0; i < err.details.length; i++) {
        console.error(`  ${err.details[i].param}: ${err.details[i].msg}`);
      }
    } else {
      console.error(err.stack);
    }

    // Make sure we quit, by closing off our connections.
    require('mongoose').disconnect();

    // This should exit normally, but it just hangs.  Apparently,
    // there's some open socket somewhere.
    process.exit(1);
  });
