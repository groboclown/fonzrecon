#!/usr/bin/env node
'use strict';

// Setup the database
require('../config/db').setup();
const models = require('../models');
const Setting = models.Setting;

var argv = process.argv;
var changes = {};
var errors = [];
var keys = [];
// TODO allow for reading JSON from stdin.
for (var i = 2; i < argv.length; i++) {
  if (argv[i] === '-h' || argv[i] === '-H' || argv[i] === '/?' || argv[i] === '/h' || argv[i] === '/H') {
    console.log(`Usage: ${argv[0]} [key=value] ...`);
    console.log('where `key` is the setting key to affect, and `value` is what to set it to.  If the value starts with a JSON character (number, [, ", {), then it will be parsed as JSON data');
    console.log('Valid keys:');
    for (let j = 0; j < Setting.ALL_SETTINGS.length; j++) {
      console.log(`    '${Setting.ALL_SETTINGS[j].key}': ${Setting.ALL_SETTINGS[j].description}`);
    }
    process.exit(0);
  }
  var p = argv[i].indexOf('=');
  if (p <= 0 || p >= argv[i].length) {
    errors.push(`Invalid argument '${argv[i]}'`);
  } else {
    let k = argv[i].substring(0, p).trim();
    let v = argv[i].substring(p + 1).trim();
    if (k.length <=0) {
      errors.push(`Invalid argument '${argv[i]}'`);
    }
    if (!Setting.ALL_SETTINGS_MAP[k]) {
      errors.push(`Unknown key ${k}`);
    }
    if (/^[[{"]|[0-9]/.test(v)) {
      v = JSON.parse(v);
    }
    changes[k] = v;
    keys.push(k);
  }
}

if (errors.length > 0) {
  console.log('Problems found during processing:\n    ' +
    errors.join('\n    '));
  process.exit(1);
}

if (keys.length <= 0) {
  console.log(`Nothing to do.`);
  process.exit(0);
}



var request = Promise.resolve(null);

function runSetFactory(key, value) {
  return () => {
    return Setting['set' + key](value)
      .then(() => {
        console.log(`::"${key}"=${JSON.stringify(value)}`);
      });
  }
}

for (var i = 0; i < keys.length; i++) {
  request = request.then(runSetFactory(keys[i], changes[keys[i]]));
}

request
  .then((results) => {
    console.log('Completed generating data.');

    // Make sure we quit, by closing off our connections.
    require('mongoose').disconnect();

    // This should exit normally, but it just hangs.  Apparently,
    // there's some open socket somewhere.
    process.exit(0);
  })
  .catch((err) => {
    console.error(err.essage);
    console.error(err.stack);

    // Make sure we quit, by closing off our connections.
    require('mongoose').disconnect();

    // This should exit normally, but it just hangs.  Apparently,
    // there's some open socket somewhere.
    process.exit(1);
  });
