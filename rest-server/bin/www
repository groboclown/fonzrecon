#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('fonzrecon:rest');
const http = require('http');
const https = require('https');
const fs = require('fs');
const config = require('../config');


/**
 * Get port from environment and store in Express.
 */
app.set('port', config.port);

/**
 * Create HTTP server.
 */
var server;
if (!!process.env.SSL_KEY && !!process.env.SSL_CERT) {
  console.log(`HTTPS Listening on port ${config.port}`);
  server = https.createServer({
    key: fs.readFileSync(process.env.SSL_KEY),
    cert: fs.readFileSync(process.env.SSL_CERT),
  }, app);
} else {
    console.log(`HTTP Listening on port ${config.port}`);
    server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? ('Pipe ' + port) : ('Port ' + port);

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES': {
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    }
    case 'EADDRINUSE': {
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    }
    default: {
      throw error;
    }
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? ('pipe ' + addr) : ('port ' + addr.port);
  debug('Listening on ' + bind);
}
