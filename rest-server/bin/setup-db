#!/usr/bin/env node
'use strict';

// Setup the database
require('../config/db').setup();
const models = require('../models');
const roles = require('../config/access/roles');
const Account = models.Account;
const User = models.User;
const Acknowledgement = models.Acknowledgement;
const PrizeChoice = models.PrizeChoice;
const Setting = models.Setting;

const SAMPLE_ACCOUNTS = [
  {
    id: 'user1',
    authentications: [
      {
        source: 'local',
        id: 'user1@fonzrecon.github',
        userInfo: ['1234'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.USER.name,
    accountEmail: 'user1@fonzrecon.github',
    userRef: 'user1',
  }, {
    id: 'user2',
    authentications: [
      {
        source: 'local',
        id: 'user2@fonzrecon.github',
        userInfo: ['1234'],
        browser: [],
      }
    ],
    role: roles.USER.name,
    userRef: 'user2',
    resetAuthenticationToken: null,
    resetAuthenticationExpires: null,
  }, {
    id: 'bot1',
    authentications: [
      {
        source: 'local',
        id: 'bot1@fonzrecon.github',
        userInfo: ['bot!'],
        browser: [],
      }
    ],
    role: roles.BOT.name,
    accountEmail: 'bot1@fonzrecon.github',
    resetAuthenticationToken: null,
    resetAuthenticationExpires: null,

    // cannot act as a user, meaning no one
    // can assign it stuff or send it stuff,
    // so it has no user.
    userRef: null,
  }, {
    id: 'admin1',
    authentications: [
      {
        source: 'local',
        id: 'admin1@fonzrecon.github',
        userInfo: ['sekret'],
        browser: [],
      }
    ],
    accountEmail: 'admin1@fonzrecon.github',
    role: roles.ADMIN.name,
    userRef: 'admin1',
    resetAuthenticationToken: null,
    resetAuthenticationExpires: null,
  }
];

const SAMPLE_USERS = [
  {
    username: 'user1',
    names: ['User1', 'User One'],
    contacts: [
      {
        type: 'email',
        server: null,
        address: 'eat@fonzrecon.email.server'
      }
    ],
    pointsToAward: 100,
    receivedPointsToSpend: 30,
    image: false,
    organization: 'Engineering',
  },
  {
    username: 'user2',
    names: ['User2', 'User Two'],
    contacts: [
      {
        type: 'email',
        server: null,
        address: 'eat2@fonzrecon.email.server'
      }
    ],
    pointsToAward: 50,
    receivedPointsToSpend: 9000,
    image: false,
    organization: 'Sales',
  },
  // bot1 does not have a user
  {
    username: 'admin1',
    names: ['Admin One'],
    contacts: [
      {
        type: 'email',
        server: null,
        address: 'admin1@fonzrecon.github',
      }
    ],
    pointsToAward: 0,
    receivedPointsToSpend: 0,
    image: false,
    organization: 'HR',
  }
];

const SAMPLE_PRIZES = [
  {
    name: 'Beef',
    description: 'A big slab of beef!',
    referenceUrl: 'https://en.wikipedia.org/wiki/beef',
    purchasePoints: 2
  }
];

var requests = [];

function saveAccount(accountObj) {
  return (account) => {
    if (!account) {
      return new Account(accountObj).save();
    }
    return account;
  }
}
for (var i = 0; i < SAMPLE_ACCOUNTS.length; i++) {
  requests.push(Account.findOne({ id: SAMPLE_ACCOUNTS[i].id })
    .then(saveAccount(SAMPLE_ACCOUNTS[i])));
}



function saveUser(userObj) {
  return (user) => {
    if (!user) {
      return new User(userObj).save();
    }
    return user;
  }
}
for (var i = 0; i < SAMPLE_USERS.length; i++) {
  console.log(`${SAMPLE_USERS[i].username}`)
  requests.push(User.findOne({ username: SAMPLE_USERS[i].username })
    .then(saveUser(SAMPLE_USERS[i]))
    .then((user) => {
      console.log('Created user ' + user.username);
    }));
}



function savePrize(prizeObj) {
  return function(prize) {
    if (! prize) {
      return new PrizeChoice(prizeObj).save();
    }
    return prize;
  }
}
for (var i = 0; i < SAMPLE_PRIZES.length; i++) {
  requests.push(PrizeChoice.findOne({ name: SAMPLE_PRIZES[i].name })
    .then(savePrize(SAMPLE_PRIZES[i]))
    .then(function(prize) {
      console.log('Created prize ' + prize.name);
    }));
}


// settings
requests.push(Setting
  .setEmailProvider('smtp')
  .then(function() {
    console.log('Created setting EmailProvider');
  })
);
requests.push(Setting
  .setEmailProviderConnection({
    user: 'my-username',
    password: 'my-password',
    host: 'smtp.hostname.fonzrecon.github',
    port: 465,
    ssl: true,
    tls: null,
    timeout: null, // Defaults to 5000
    domain: null, // If you need it
    authentication: 'plain' // Or xoauth2
  })
  .then(function() {
    console.log('Created setting EmailProviderConnection');
  }));


Promise
  .all(requests)
  .then((results) => {
    console.log('Completed generating data.');

    // Make sure we quit, by closing off our connections.
    require('mongoose').disconnect();

    // This should exit normally, but it just hangs.  Apparently,
    // there's some open socket somewhere.
    process.exit(0);
  })
  .catch((err) => {
    console.error(err.essage);
    console.error(err.stack);
  });
