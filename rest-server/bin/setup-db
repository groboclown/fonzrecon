#!/usr/bin/env node
'use strict';

// Setup the database
require('../config/db').setup();
const models = require('../models');
const roles = require('../config/access/roles');
const Account = models.Account;
const User = models.User;
const Acknowledgement = models.Acknowledgement;
const PrizeChoice = models.PrizeChoice;

const SAMPLE_ACCOUNTS = [
  {
    id: 'user1',
    authentications: [
      {
        source: 'local',
        id: 'user1@fonzrecon.github',
        userInfo: ['1234'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.USER.name,
    userRef: 'user1',
  }, {
    id: 'user2',
    authentications: [
      {
        source: 'local',
        id: 'user2@fonzrecon.github',
        userInfo: ['1234'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.USER.name,
    userRef: 'user2',
  }, {
    id: 'bot1',
    authentications: [
      {
        source: 'local',
        id: 'bot1@fonzrecon.github',
        userInfo: ['bot!'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.BOT.name,

    // cannot act as a user, meaning no one
    // can assign it stuff or send it stuff,
    // so it has no user.
    userRef: null,
  }, {
    id: 'admin1',
    authentications: [
      {
        source: 'local',
        id: 'admin1@fonzrecon.github',
        userInfo: ['sekret'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.ADMIN.name,
    userRef: 'admin1',
  }
];

const SAMPLE_USERS = [
  {
    username: 'user1',
    names: ['User1', 'User One'],
    contact: [
      {
        type: 'email',
        server: null,
        address: 'eat@fonzrecon.email.server'
      }
    ],
    pointsToAward: 100,
    receivedPointsSpent: 30,
    organization: 'Engineering'
  },
  {
    username: 'user2',
    names: ['User2', 'User Two'],
    contact: [
      {
        type: 'email',
        server: null,
        address: 'eat2@fonzrecon.email.server'
      }
    ],
    pointsToAward: 50,
    receivedPointsSpent: 9000,
    organization: 'Sales'
  },
  // bot1 does not have a user
  {
    username: 'admin1',
    names: ['Admin One'],
    contact: [],
    pointsToAward: 0,
    receivedPointsSpent: 0,
    organization: 'HR',
  }
];

const SAMPLE_PRIZES = [
  {
    name: 'Beef',
    description: 'A big slab of beef!',
    referenceUrl: 'https://en.wikipedia.org/wiki/beef',
    purchasePoints: 2
  }
];

var requests = [];

function saveAccount(accountObj) {
  return function(account) {
    if (! account) {
      return new Account(accountObj).save();
    }
    return account;
  }
}
for (var i = 0; i < SAMPLE_ACCOUNTS.length; i++) {
  requests.push(Account.findOne({ id: SAMPLE_ACCOUNTS[i].id })
    .then(saveAccount(SAMPLE_ACCOUNTS[i]))
    .then(function(account) {
      console.log('Created account ' + account.id);
    }));
}



function saveUser(userObj) {
  return function(user) {
    if (! user) {
      return new User(userObj).save();
    }
    return user;
  }
}
for (var i = 0; i < SAMPLE_USERS.length; i++) {
  requests.push(User.findOne({ username: SAMPLE_USERS[i].username })
    .then(saveUser(SAMPLE_USERS[i]))
    .then(function(user) {
      console.log('Created user ' + user.username);
    }));
}



function savePrize(prizeObj) {
  return function(prize) {
    if (! prize) {
      return new PrizeChoice(prizeObj).save();
    }
    return prize;
  }
}
for (var i = 0; i < SAMPLE_PRIZES.length; i++) {
  requests.push(PrizeChoice.findOne({ name: SAMPLE_PRIZES[i].name })
    .then(savePrize(SAMPLE_PRIZES[i]))
    .then(function(prize) {
      console.log('Created prize ' + prize.name);
    }));
}



Promise
  .all(requests)
  .then(function(results) {
    console.log('Completed generating data.');
  })
  .catch(function(err) {
    console.error(err);
  });
