#!/usr/bin/env node
'use strict';

// Setup the database
require('../config/db').setup();
const models = require('../models');
const roles = require('../config/access/roles');
const Account = models.Account;
const User = models.User;
const Acknowledgement = models.Acknowledgement;

const SAMPLE_ACCOUNTS = [
  {
    _id: 'user1',
    authentications: [
      {
        source: 'local',
        id: 'user1@fonzrecon.github',
        userInfo: ['1234'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.USER.name,
    userRef: 'user1',
  }, {
    _id: 'bot1',
    authentications: [
      {
        source: 'local',
        id: 'bot1@fonzrecon.github',
        userInfo: ['bot!'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.BOT.name,

    // cannot act as a user, meaning no one
    // can assign it stuff or send it stuff,
    // so it has no user.
    userRef: null,
  }, {
    _id: 'admin1',
    authentications: [
      {
        source: 'local',
        id: 'admin1@fonzrecon.github',
        userInfo: ['sekret'],
        browser: [],
        resetAuthenticationToken: null,
        resetAuthenticationExpires: null,
      }
    ],
    role: roles.ADMIN.name,
    userRef: 'admin1',
  }
];

const SAMPLE_USERS = [
  {
    '_id': 'user1', 'username': 'user1',
    'names': ['User1', 'User One'],
    'contact': [
      {
        'type': 'email',
        'server': null,
        'address': 'eat@fonzrecon.email.server'
      }
    ],
    'pointsToAward': 100,
    'receivedPointsSpent': 30,
    'organization': 'Engineering'
  },
  // bot1 does not have a user
  {
    '_id': 'admin1', 'username': 'admin1',
    'names': ['Admin One'],
    'contact': [],
    'pointsToAward': 0,
    'receivedPointsSpent': 0,
    'organization': 'HR',
  }
];

var requests = [];

function saveAccount(accountObj) {
  return function(account) {
    if (! account) {
      return new Account(accountObj).save();
    }
    return account;
  }
}
for (var i = 0; i < SAMPLE_ACCOUNTS.length; i++) {
  requests.push(Account.findOne({ _id: SAMPLE_ACCOUNTS[i]._id })
    .then(saveAccount(SAMPLE_ACCOUNTS[i]))
    .then(function(account) {
      console.log('Created account ' + account._id);
    }));
}



function saveUser(userObj) {
  return function(user) {
    if (! user) {
      return new User(userObj).save();
    }
    return user;
  }
}
for (var i = 0; i < SAMPLE_USERS.length; i++) {
  requests.push(User.findOne({ username: SAMPLE_USERS[i].username })
    .then(saveUser(SAMPLE_USERS[i]))
    .then(function(user) {
      console.log('Created user ' + user.username);
    }));
}

Promise
  .all(requests)
  .then(function(results) {
    console.log('Completed generating data.');
  })
  .catch(function(err) {
    console.error(err);
  });
