#!/usr/bin/env node
'use strict';

// Setup the database
require('../config/db').setup();
const models = require('../models');
const roles = require('../config/access/roles');
const Login = models.Login;
const User = models.User;
const Award = models.Award;

const SAMPLE_LOGINS = [
  {
    username: 'user1',
    email: 'user1@fonzrecon.github',
    authentication: '1234',
    role: roles.USER.name,
    resetAuthenticationToken: null,
    resetAuthenticationExpires: null,
    userRef: 'user1',
  }, {
    username: 'bot1',
    email: 'bot1@fonzrecon.github',
    authentication: 'bot!',
    role: roles.BOT.name,
    resetAuthenticationToken: null,
    resetAuthenticationExpires: null,

    // cannot act as a user, meaning no one
    // can assign it stuff or send it stuff,
    // so it has no user.
    userRef: null,
  }, {
    username: 'admin1',
    email: 'admin1@fonzrecon.github',
    authentication: 'sekret',
    role: roles.ADMIN.name,
    resetAuthenticationToken: null,
    resetAuthenticationExpires: null,
    userRef: 'admin1',
  }
];

const SAMPLE_USERS = [
  {
    'username': 'user1',
    'names': ['User1', 'User One'],
    'contact': [
      {
        'type': 'email',
        'server': null,
        'address': 'eat@fonzrecon.email.server'
      }
    ],
    'pointsToAward': 100,
    'receivedPointsSpent': 30,
    'organization': 'Engineering'
  },
  // bot1 does not have a user
  {
    'username': 'admin1',
    'names': ['Admin One'],
    'contact': [],
    'pointsToAward': 0,
    'receivedPointsSpent': 0,
    'organization': 'HR',
  }
];


function saveLogin(loginObj) {
  return function(login) {
    if (! login) {
      return new Login(loginObj).save();
    }
    return login;
  }
}
for (var i = 0; i < SAMPLE_LOGINS.length; i++) {
  Login.findOne({ username: SAMPLE_LOGINS[i].username })
    .then(saveLogin(SAMPLE_LOGINS[i]))
    .then(function(login) {
      console.log('Created login ' + login.username);
    });
}



function saveUser(userObj) {
  return function(user) {
    if (! user) {
      return new User(userObj).save();
    }
    return user;
  }
}
for (var i = 0; i < SAMPLE_USERS.length; i++) {
  User.findOne({ username: SAMPLE_USERS[i].username })
    .then(saveUser(SAMPLE_USERS[i]))
    .then(function(user) {
      console.log('Created user ' + user.username);
    });
}
